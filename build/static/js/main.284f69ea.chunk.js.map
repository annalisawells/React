{"version":3,"sources":["serviceWorker.js","Components/Navbar.js","Components/ToDoItem.js","Components/TodoData.js","Components/ContactCardInfo.js","Components/ContactCard.js","Components/MainContent.js","Components/Footer.js","Components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Navbar","className","href","ToDoItem","props","type","checked","item","completed","text","todosData","id","ContactCardInfo","name","imgUrl","altText","phone","email","ContactCard","src","contact","alt","MainContent","state","todos","contacts","timeOfDay","hours","Date","getHours","todoItems","this","map","key","contactCard","style","color","padding","fontSize","React","Component","Footer","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCASC,MAhBf,WACI,OACI,gCACI,yBAAKC,UAAU,OACX,4BACI,wBAAIA,UAAU,QAAO,uBAAGC,KAAK,KAAR,SACrB,wBAAID,UAAU,aAAY,uBAAGA,UAAU,SAASC,KAAK,KAA3B,cAC1B,wBAAID,UAAU,SAAQ,uBAAGC,KAAK,KAAR,UACtB,wBAAID,UAAU,QAAO,uBAAGC,KAAK,KAAR,eACrB,wBAAID,UAAU,WAAU,uBAAGC,KAAK,KAAR,gB,mCCD7BC,MARf,SAAkBC,GACd,OACI,yBAAKH,UAAU,aACX,2BAAOI,KAAK,WAAWC,QAASF,EAAMG,KAAKC,YAC3C,2BAAIJ,EAAMG,KAAKE,QCsBZC,EA5BG,CACd,CACIC,GAAI,EACJF,KAAM,qBACND,WAAW,GAEf,CACIG,GAAI,EACJF,KAAM,mBACND,WAAW,GAEf,CACIG,GAAI,EACJF,KAAM,2BACND,WAAW,GAEf,CACIG,GAAI,EACJF,KAAM,eACND,WAAW,GAEf,CACIG,GAAI,EACJF,KAAM,4BACND,WAAW,ICWJI,EAnCS,CACpB,CACID,GAAI,EACJE,KAAM,iBACNC,OAAQ,iCACRC,QAAS,wCACTC,MAAO,iBACPC,MAAO,0BAEX,CACIN,GAAI,EACJE,KAAM,aACNC,OAAQ,iCACRC,QAAS,+CACTC,MAAO,iBACPC,MAAO,gBAEX,CACIN,GAAI,EACJE,KAAM,YACNC,OAAQ,iCACRC,QAAS,wCACTC,MAAO,iBACPC,MAAO,sBAEX,CACIN,GAAI,EACJE,KAAM,UACNC,OAAQ,iCACRC,QAAS,wBACTC,MAAO,iBACPC,MAAO,uBClBAC,MAXf,SAAqBd,GACjB,OACI,yBAAKH,UAAU,gBACX,yBAAKkB,IAAKf,EAAMgB,QAAQN,OAAQO,IAAKjB,EAAMgB,QAAQC,MACnD,4BAAKjB,EAAMgB,QAAQP,MACnB,qCAAWT,EAAMgB,QAAQJ,OACzB,qCAAWZ,EAAMgB,QAAQH,SC8CtBK,E,YA/Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAOd,EACPe,SAAUb,GAJA,E,sEASZ,IAEIc,EADEC,GADO,IAAIC,MACEC,WAIjBH,EADEC,EAAQ,GACE,UACHA,GAAS,IAAMA,EAAQ,GACpB,YACHA,GAAS,IAAMA,EAAQ,GACpB,UAEA,QAGd,IAMMG,EAAYC,KAAKR,MAAMC,MAAMQ,KAAI,SAAAzB,GAAI,OAAI,kBAAC,EAAD,CAAU0B,IAAK1B,EAAKI,GAAIJ,KAAMA,OACvE2B,EAAcH,KAAKR,MAAME,SAASO,KAAI,SAAAZ,GAAO,OAAI,kBAAC,EAAD,CAAaa,IAAKb,EAAQT,GAAIS,QAASA,OAE9F,OACE,6BACE,wBAAIe,MAXO,CACbC,MAAO,OACPC,QAAS,GACTC,SAAU,KAQR,QAA2BZ,EAA3B,KACA,yBAAKzB,UAAU,aACZ6B,GAGH,yBAAK7B,UAAU,YACZiC,Q,GAzCeK,IAAMC,WCKjBC,MATf,WACI,OACI,4BAAQxC,UAAU,UACd,oDAAyB,uBAAGC,KAAK,uDAAR,gBCYtBwC,MAZf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCZC,IAASC,OAAO,mBAJhB,WACI,OAAOF,MAGK,MAAWG,SAASC,eAAe,STsH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.284f69ea.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nfunction Navbar(){\r\n    return (\r\n        <header>\r\n            <div className=\"nav\">\r\n                <ul>\r\n                    <li className=\"home\"><a href=\"#\">Home</a></li>\r\n                    <li className=\"tutorials\"><a className=\"active\" href=\"#\">Tutorials</a></li>\r\n                    <li className=\"about\"><a href=\"#\">About</a></li>\r\n                    <li className=\"news\"><a href=\"#\">Newsletter</a></li>\r\n                    <li className=\"contact\"><a href=\"#\">Contact</a></li>\r\n                </ul>\r\n            </div>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from \"react\"\r\n\r\nfunction ToDoItem(props) {\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input type=\"checkbox\" checked={props.item.completed}/>\r\n            <p>{props.item.text}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default ToDoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean Keemun's litterbox\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Stir compost\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Stargate SG-1\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","const ContactCardInfo = [\r\n    {\r\n        id: 1,\r\n        name: \"Mr. Whiskerson\",\r\n        imgUrl: \"http://placekitten.com/300/200\",\r\n        altText: \"chill white kitten with gray markings\",\r\n        phone: \"(212) 555-1234\",\r\n        email: \"mr.whiskaz@catnap.meow\"\r\n    },\r\n    {\r\n        id: 2,\r\n        name: \"Fluffykins\",\r\n        imgUrl: \"http://placekitten.com/400/200\",\r\n        altText: \"inquisitive dark grey and brown tabby kitten\",\r\n        phone: \"(212) 555-2345\",\r\n        email: \"fluff@me.com\"\r\n    },\r\n    {\r\n        id: 3,\r\n        name: \"Destroyer\",\r\n        imgUrl: \"http://placekitten.com/400/300\",\r\n        altText: \"chill grey kitten with white markings\",\r\n        phone: \"(212) 555-3456\",\r\n        email: \"ofworlds@yahoo.com\"\r\n    },\r\n    {\r\n        id: 4,\r\n        name: \"Meowler\",\r\n        imgUrl: \"http://placekitten.com/200/100\",\r\n        altText: \"shy light brown tabby\",\r\n        phone: \"(212) 555-4567\",\r\n        email: \"thecat@hotmail.com\"\r\n    }\r\n]\r\n\r\nexport default ContactCardInfo","import React from \"react\";\r\n\r\nfunction ContactCard(props) {\r\n    return (\r\n        <div className=\"contact-card\">\r\n            <img src={props.contact.imgUrl} alt={props.contact.alt}/>\r\n            <h3>{props.contact.name}</h3>\r\n            <p>Phone: {props.contact.phone}</p>\r\n            <p>Email: {props.contact.email}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactCard","import React from 'react';\r\nimport ToDoItem from \"./ToDoItem\"\r\nimport todosData from \"./TodoData\"\r\nimport ContactCardInfo from \"./ContactCardInfo\"\r\nimport ContactCard from \"./ContactCard\"\r\n\r\nclass MainContent extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      todos: todosData,\r\n      contacts: ContactCardInfo\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const date = new Date()\r\n    const hours = date.getHours()\r\n    let timeOfDay\r\n\r\n    if (hours < 12) {\r\n      timeOfDay = \"morning\";\r\n    } else if (hours >= 12 && hours < 17) {\r\n      timeOfDay = \"afternoon\";\r\n    } else if (hours >= 15 && hours < 21) {\r\n      timeOfDay = \"evening\";\r\n    } else {\r\n      timeOfDay = \"night\";\r\n    }\r\n\r\n    let h1Styles = {\r\n      color: \"#000\",\r\n      padding: 25,\r\n      fontSize: 50\r\n    }\r\n\r\n    const todoItems = this.state.todos.map(item => <ToDoItem key={item.id} item={item} />)\r\n    const contactCard = this.state.contacts.map(contact => <ContactCard key={contact.id} contact={contact} />)\r\n\r\n    return (\r\n      <div>\r\n        <h1 style={h1Styles}>Good {timeOfDay}!</h1>\r\n        <div className=\"todo-list\">\r\n          {todoItems}\r\n        </div>\r\n\r\n        <div className=\"contacts\">\r\n          {contactCard}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default MainContent;","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return (\r\n        <footer className=\"footer\">\r\n            <h5>Return to Annalisa's <a href=\"https://annalisawells.github.io/portfolio#portfolio\">Portfolio</a></h5>\r\n        </footer>\r\n    )\r\n};\r\n\r\n\r\nexport default Footer;","import React from 'react';\r\nimport Navbar from \"./Navbar\";\r\nimport MainContent from \"./MainContent\";\r\nimport Footer from \"./Footer\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <Navbar />\r\n            <MainContent />\r\n            <Footer />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./Components/App\";\r\n\r\n\r\nfunction MyApp() {\r\n    return App();\r\n}\r\n\r\nReactDOM.render(<MyApp />, document.getElementById('root'));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}